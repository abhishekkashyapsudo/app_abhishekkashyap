pipeline {
  agent any
  environment{
      registry = 'kashyapabhishek123/i-abhishekkashyap-master'
      username = 'kashyapabhishek123'
      project_id = 'prismatic-grail-320808'
      cluster_name = 'cluster-1'
      location = 'us-central1-c'
      credentials_id = 'CloudGKE'
      docker_port = "${env.BRANCH_NAME == "develop" ? "7200" : "7300"}"
      gke_port = "${env.BRANCH_NAME == "develop" ? "30157" : "30158"}"
  }
  
  tools {
    maven 'MAVEN_HOME'
    dockerTool 'Test_Docker'
  }
  
  options{
      timestamps()
      timeout(time: 1, unit: 'HOURS')

  }
  stages { 
        stage('Build') {
            steps{
            	git url: 'https://github.com/abhishekkashyapsudo/app_abhishekkashyap.git'
                sh 'mvn -f demosampleapplication/pom.xml clean install'
            }
        }
        stage('Sonar Analysis') {
            steps{
                withSonarQubeEnv(credentialsId: 'Test_Sonar', installationName: 'Test_Sonar') {
                   sh 'mvn -f demosampleapplication/pom.xml sonar:sonar -Dsonar.projectKey=sonar-abhishekkashyap -Dsonar.host.url=http://localhost:8112'
                }
            }
        }
       
        stage('Docker Image') {
            steps{
                script {
                    sh 'docker build --build-arg port=${docker_port} --build-arg port1=${gke_port} -t ${registry}:${BUILD_NUMBER} . -f demosampleapplication/Dockerfile' 
                	withDockerRegistry([credentialsId: 'DockerHub', url:'https://registry.hub.docker.com']) {
	                    sh 'docker tag ${registry}:${BUILD_NUMBER} ${username}/c-abhishekkashyap-master:${BUILD_NUMBER}'
	                    sh 'docker tag ${registry}:${BUILD_NUMBER} ${username}/c-abhishekkashyap-master:latest'
                	}
                }
            }
        }
        
        stage('Containers') {
          steps {
            parallel(
              'PreContainerCheck': {
               script {
                    def result = sh(returnStdout: true, script: 'docker ps --filter publish=8080  --format "{{.ID}}"')
                    if ("echo ${result}" != '') {
                        sh "docker stop ${result}"
                    }
                    def result1 = sh(returnStdout: true, script: 'docker ps --filter expose=8080  --format "{{.ID}}"')
                    if ("echo ${result1}" != '') {
                        sh "docker stop ${result1}"
                    }
                }
              },
              'PushToDockerHub': {
                withDockerRegistry([credentialsId: 'DockerHub', url:'https://registry.hub.docker.com']) {
	            	sh 'docker push ${username}/c-abhishekkashyap-master:${BUILD_NUMBER}'
                    sh 'docker push ${username}/c-abhishekkashyap-master:latest' 
        	      }
              }
            )
          }
        }
        
        stage('Docker Deployment') {
            steps{
                script {
                    sh 'docker container run -d --publish ${docker_port}:8080 ${username}/c-abhishekkashyap-master:latest'
                }
            }
        }
        stage('Kubernetes Deployment') {
            steps{
                step([$class: 'KubernetesEngineBuilder', projectId: env.project_id, clusterName: env.cluster_name, location: env.location, manifestPattern: 'demosampleapplication/deployment.yaml', credentialsId: env.credentials_id, verifyDeployments: true])
            }
        }
         
    }
    
    post {
        always {
            junit 'demosampleapplication/target/surefire-reports/*.xml'
        }
    }
}